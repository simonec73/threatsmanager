using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Newtonsoft.Json;
using PostSharp.Patterns.Contracts;
using PostSharp.Patterns.Recording;
using PostSharp.Patterns.Model;
using ThreatsManager.Engine.Aspects;
using ThreatsManager.Interfaces;
using ThreatsManager.Interfaces.ObjectModel;
using ThreatsManager.Interfaces.ObjectModel.Properties;
using ThreatsManager.Interfaces.ObjectModel.ThreatsMitigations;
using ThreatsManager.Utilities;
using ThreatsManager.Utilities.Aspects;
using ThreatsManager.Utilities.Aspects.Engine;
using PostSharp.Patterns.Collections;

namespace ThreatsManager.Engine.ObjectModel.ThreatsMitigations
{
#pragma warning disable CS0067
    [JsonObject(MemberSerialization.OptIn)]
    [Serializable]
    [SimpleNotifyPropertyChanged]
    [IntroduceNotifyPropertyChanged]
    [IdentityAspect]
    [ThreatModelChildAspect]
    [ThreatModelIdChanger]
    [ParentIdChanger]
    [SeverityIdChanger]
    [WeaknessIdChanger]
    [PropertiesContainerAspect]
    [VulnerabilityMitigationsContainerAspect]
    [SourceInfoAspect]
    [Recordable(AutoRecord = false)]
    [Undoable]
    [TypeLabel("Vulnerability")]
    public class Vulnerability : IVulnerability, IInitializableObject, IForceSetId
    {
        public Vulnerability()
        {

        }

        public Vulnerability([NotNull] IWeakness weakness) : this()
        {
            _id = Guid.NewGuid();
            _weakness = weakness;
            _model = weakness.Model;
            Name = weakness.Name;
            Description = weakness.Description;
            Severity = weakness.Severity;
            var properties = weakness.Properties?.ToArray();
            if (properties?.Any() ?? false)
            {
                foreach (var property in properties)
                {
                    AddProperty(property);
                }
            }
        }

        public bool IsInitialized => Model != null && _id != Guid.Empty && _weaknessId != Guid.Empty;

        public static bool UseWeaknessInfo { get; set; }

        #region Default implementation.
        [Reference]
        [field: NotRecorded]
        public IThreatModel Model { get; }
        public event Action<IPropertiesContainer, IProperty> PropertyAdded;
        public event Action<IPropertiesContainer, IProperty> PropertyRemoved;
        public event Action<IPropertiesContainer, IProperty> PropertyValueChanged;
        [Reference]
        [field: NotRecorded]
        public IEnumerable<IProperty> Properties { get; }
        public bool HasProperty(IPropertyType propertyType)
        {
            return false;
        }
        public IProperty GetProperty(IPropertyType propertyType)
        {
            return null;
        }

        public IProperty AddProperty(IPropertyType propertyType, string value)
        {
            return null;
        }

        public bool RemoveProperty(IPropertyType propertyType)
        {
            return false;
        }

        public bool RemoveProperty(Guid propertyTypeId)
        {
            return false;
        }

        public void ClearProperties()
        {
        }

        public void Apply(IPropertySchema schema)
        {
        }

        public void Unapply(IPropertySchema schema)
        {
        }

        public event Action<IVulnerabilityMitigationsContainer, IVulnerabilityMitigation> VulnerabilityMitigationAdded;
        public event Action<IVulnerabilityMitigationsContainer, IVulnerabilityMitigation> VulnerabilityMitigationRemoved;
        [Reference]
        [field: NotRecorded]
        public IEnumerable<IVulnerabilityMitigation> Mitigations { get; }
        public IVulnerabilityMitigation GetMitigation(Guid mitigationId)
        {
            return null;
        }

        public IVulnerabilityMitigation AddMitigation(IMitigation mitigation, IStrength strength, 
            MitigationStatus status = MitigationStatus.Proposed, string directives = null)
        {
            return null;
        }

        public void Add(IVulnerabilityMitigation mitigation)
        {
        }

        public bool RemoveMitigation(Guid mitigationId)
        {
            return false;
        }

        public Guid SourceTMId { get; }

        public string SourceTMName { get; }

        public string VersionId { get; }

        public string VersionAuthor { get; }

        public void SetSourceInfo(IThreatModel source)
        {
        }
        #endregion

        #region Additional placeholders required.
        [JsonProperty("modelId")]
        protected Guid _modelId { get; set; }
        [Reference]
        [field: NotRecorded]
        [field: UpdateThreatModelId]
        [field: AutoApplySchemas]
        protected IThreatModel _model { get; set; }
        [Child]
        [JsonProperty("properties", ItemTypeNameHandling = TypeNameHandling.Objects)]
        private AdvisableCollection<IProperty> _properties { get; set; }
        [Child]
        [JsonProperty("mitigations")]
        private AdvisableCollection<VulnerabilityMitigation> _mitigations { get; set; }
        [JsonProperty("sourceTMId")]
        protected Guid _sourceTMId { get; set; }
        [JsonProperty("sourceTMName")]
        protected string _sourceTMName { get; set; }
        [JsonProperty("versionId")]
        protected string _versionId { get; set; }
        [JsonProperty("versionAuthor")]
        protected string _versionAuthor { get; set; }
        #endregion

        #region Specific implementation.
        public Scope PropertiesScope => Scope.Vulnerability;

        [JsonProperty("id")]
        private Guid _id { get; set; }

        public Guid Id => _id;

        public void SetId(Guid id)
        {
            _id = id;
        }

        [JsonProperty("name")] 
        private string _name { get; set; }

        [property: NotRecorded]
        [SafeForDependencyAnalysis]
        public string Name
        {
            get => UseWeaknessInfo ? Weakness?.Name : _name;

            set => _name = value;
        }

        [JsonProperty("description")]
        private string _description { get; set; }

        [property: NotRecorded]
        [SafeForDependencyAnalysis]
        public string Description         
        {
            get => UseWeaknessInfo ? Weakness?.Description : _description;

            set => _description = value;
        }

        [JsonProperty("parent")]
        private Guid _parentId { get; set; }

        [Parent]
        [field: NotRecorded]
        [field: UpdateParentId]
        [field: AutoApplySchemas]
        private IIdentity _parent { get; set; }

        public Guid ParentId => _parentId;

        [InitializationRequired]
        [IgnoreAutoChangeNotification]
        public IVulnerabilitiesContainer Parent
        {
            get
            {
                if (_parent == null)
                    _parent = Model.GetEntity(_parentId);

                if (_parent == null)
                    _parent = Model.GetDataFlow(_parentId);

                if (_parent == null)
                    _parent = Model.GetThreatEvents()?.FirstOrDefault(x => x.Id == _parentId);

                if (_parent == null && _parentId == _modelId)
                    _parent = _model;

                return _parent as IVulnerabilitiesContainer;
            }
        }

        [JsonProperty("severity")]
        private int _severityId { get; set; }

        public int SeverityId => _severityId;

        [Reference]
        [NotRecorded]
        [UpdateSeverityId]
        private ISeverity _severity;

        [InitializationRequired]
        [SafeForDependencyAnalysis]
        [property: NotRecorded]
        public ISeverity Severity
        {
            get
            {
                if ((_severity?.Id ?? -1) != _severityId)
                    _severity = Model?.GetSeverity(_severityId);

                return _severity;
            }

            set
            {
                if (value != null && value.Equals(Model.GetSeverity(value.Id)))
                {
                    _severity = value;
                }
            }
        }

        [JsonProperty("weaknessId")]
        [NotRecorded]
        private Guid _weaknessId { get; set; }

        public Guid WeaknessId => _weaknessId;

        [Reference]
        [NotRecorded]
        [UpdateWeaknessId]
        private IWeakness _weakness;

        [InitializationRequired]
        [IgnoreAutoChangeNotification]
        public IWeakness Weakness => _weakness ?? (_weakness = Model?.GetWeakness(_weaknessId));

        public MitigationLevel GetMitigationLevel()
        {
            MitigationLevel result = MitigationLevel.NotMitigated;

            var mitigations = Mitigations?.ToArray();
            var level = 0;

            if (mitigations?.Any() ?? false)
            {
                foreach (var m in mitigations)
                {
                    level += m.StrengthId;
                }
            }

            if (level >= 100)
                result = MitigationLevel.Complete;
            else if (level > 0)
                result = MitigationLevel.Partial;

            return result;
        }

        public IVulnerability Clone([NotNull] IVulnerabilitiesContainer container)
        {
            Vulnerability result = null;

            if (container is IThreatModelChild child && child.Model is IThreatModel model)
            {
                using (var scope = UndoRedoManager.OpenScope("Clone Vulnerability"))
                {
                    result = new Vulnerability()
                    {
                        _id = _id,
                        _model = model,
                        Name = Name,
                        Description = Description,
                        _parentId = _parentId,
                        _severityId = _severityId,
                        _weaknessId = _weaknessId
                    };
                    container.Add(result);
                    this.CloneProperties(result);

                    var mitigations = Mitigations?.ToArray();
                    if (mitigations?.Any() ?? false)
                    {
                        foreach (var mitigation in mitigations)
                        {
                            mitigation.Clone(result);
                        }
                    }

                    if (model.Id != _modelId)
                        result.SetSourceInfo(Model);
                    
                    scope?.Complete();
                }
            }

            return result;
        }

        private void AddProperty([NotNull] IProperty property)
        {
            var shadowClass = property.GetType().GetCustomAttributes<AssociatedPropertyClassAttribute>().FirstOrDefault();
            if (shadowClass != null)
            {
                var shadowClassType = Type.GetType(shadowClass.AssociatedType, false);
                if (shadowClassType != null)
                {
                    using (var scope = UndoRedoManager.OpenScope("Add Property to Vulnerability"))
                    {
                        var shadowProperty = Activator.CreateInstance(shadowClassType, property) as IProperty;

                        if (shadowProperty != null)
                        {
                            if (_properties == null)
                                _properties = new AdvisableCollection<IProperty>();

                            UndoRedoManager.Attach(shadowProperty, Model);
                            _properties.Add(shadowProperty);
                            PropertyAdded?.Invoke(this, shadowProperty);
                            shadowProperty.Changed += delegate (IProperty prop)
                            {
                                PropertyValueChanged?.Invoke(this, prop);
                            };

                            scope?.Complete();
                        }
                    }
                }
            }
        }

        public override string ToString()
        {
            return Name ?? ThreatModelManager.Undefined;
        }
        #endregion
    }
}